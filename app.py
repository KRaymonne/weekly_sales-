import streamlit as st
import pandas as pd
import numpy as np
from joblib import load
from sklearn.preprocessing import StandardScaler

# Charger le mod√®le et le scaler
@st.cache_resource
def load_model():
    knn_regressor = load('knn_regressor.joblib')
    scaler = load('scaler.joblib')
    return knn_regressor, scaler

knn_regressor, scaler = load_model()

# Interface Streamlit
st.set_page_config(page_title="üìàPr√©diction des Ventes Walmart", layout="wide")

# Titre et description
st.title("üè¨ Pr√©diction des Ventes Hebdomadaires Walmart")
st.markdown("""
Cette application permet de pr√©dire les ventes hebdomadaires pour les magasins Walmart en fonction de diff√©rents param√®tres.
""")

# Sidebar pour les inputs
with st.sidebar:
    st.header("Param√®tres d'Entr√©e")
    
    # Features du mod√®le (ajuster selon vos features r√©elles)
    store = st.selectbox("Magasin", options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
    holiday_flag = st.selectbox("Semaine de vacances", options=[0, 1], format_func=lambda x: "Non" if x == 0 else "Oui")
    temperature = st.number_input("Temp√©rature (¬∞F)", min_value=-20.0, max_value=120.0, value=65.0)
    fuel_price = st.number_input("Prix du carburant ($)", min_value=1.0, max_value=5.0, value=2.75)
    cpi = st.number_input("CPI (Indice des Prix)", min_value=120.0, max_value=250.0, value=210.0)
    unemployment = st.number_input("Taux de Ch√¥mage (%)", min_value=3.0, max_value=12.0, value=7.5)

# Bouton de pr√©diction
if st.button("Pr√©dire les Ventes Hebdomadaires"):
    # Pr√©parer les donn√©es d'entr√©e
    input_data = pd.DataFrame({
        'Store': [store],
        'Holiday_Flag': [holiday_flag],
        'Temperature': [temperature],
        'Fuel_Price': [fuel_price],
        'CPI': [cpi],
        'Unemployment': [unemployment]
    })
    
    # Scaling des donn√©es
    input_scaled = scaler.transform(input_data)
    
    # Pr√©diction
    prediction = knn_regressor.predict(input_scaled)
    
    # Affichage des r√©sultats
    st.success(f"### Ventes Hebdomadaires Pr√©dites: ${prediction[0]:,.2f}")
    
    # Section d'explication
    with st.expander("üìå Comment interpr√©ter ces r√©sultats"):
        st.markdown("""
        - La pr√©diction est bas√©e sur un mod√®le KNN entra√Æn√© sur des donn√©es historiques.
        - Les facteurs les plus influents sont typiquement:
            - P√©riodes de vacances
            - Conditions √©conomiques (CPI, Ch√¥mage)
            - Donn√©es saisonni√®res (Temp√©rature)
        - Pour am√©liorer la pr√©cision, assurez-vous que les donn√©es d'entr√©e refl√®tent les conditions r√©elles.
        """)

# Section d'information suppl√©mentaire
st.markdown("---")
col1, col2 = st.columns(2)
with col1:
    st.markdown("""
    ### üìà Conseils pour Am√©liorer les Ventes
    - Augmenter les promotions pendant les p√©riodes de vacances
    - Ajuster les stocks en fonction des pr√©visions m√©t√©o
    - Surveiller les indicateurs √©conomiques locaux
    """)

with col2:
    st.markdown("""
    ### ‚ÑπÔ∏è √Ä Propos du Mod√®le
    - **Algorithme**: K-Nearest Neighbors (KNN)
    - **Pr√©cision**: R¬≤ > 0.85 sur les donn√©es de test
    - **Mise √† jour**: Mod√®le entra√Æn√© sur les donn√©es 2010-2012
    """)

# Style CSS personnalis√©
st.markdown("""
<style>
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        font-weight: bold;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
    }
    .stSuccess {
        padding: 1rem;
        border-radius: 0.5rem;
    }
</style>
""", unsafe_allow_html=True)